// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/27/2022 14:17:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mult32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mult32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] multiplicand;
reg [31:0] multiplier;
reg reset;
// wires                                               
wire [31:0] product;
wire product01;
wire shift1;
wire [2:0] state;
wire write1;

// assign statements (if any)                          
mult32 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.multiplicand(multiplicand),
	.multiplier(multiplier),
	.product(product),
	.product01(product01),
	.reset(reset),
	.shift1(shift1),
	.state(state),
	.write1(write1)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
// multiplicand[ 31 ]
initial
begin
	multiplicand[31] = 1'b0;
end 
// multiplicand[ 30 ]
initial
begin
	multiplicand[30] = 1'b0;
end 
// multiplicand[ 29 ]
initial
begin
	multiplicand[29] = 1'b0;
end 
// multiplicand[ 28 ]
initial
begin
	multiplicand[28] = 1'b0;
end 
// multiplicand[ 27 ]
initial
begin
	multiplicand[27] = 1'b0;
end 
// multiplicand[ 26 ]
initial
begin
	multiplicand[26] = 1'b0;
end 
// multiplicand[ 25 ]
initial
begin
	multiplicand[25] = 1'b0;
end 
// multiplicand[ 24 ]
initial
begin
	multiplicand[24] = 1'b0;
end 
// multiplicand[ 23 ]
initial
begin
	multiplicand[23] = 1'b0;
end 
// multiplicand[ 22 ]
initial
begin
	multiplicand[22] = 1'b0;
end 
// multiplicand[ 21 ]
initial
begin
	multiplicand[21] = 1'b0;
end 
// multiplicand[ 20 ]
initial
begin
	multiplicand[20] = 1'b0;
end 
// multiplicand[ 19 ]
initial
begin
	multiplicand[19] = 1'b0;
end 
// multiplicand[ 18 ]
initial
begin
	multiplicand[18] = 1'b0;
end 
// multiplicand[ 17 ]
initial
begin
	multiplicand[17] = 1'b0;
end 
// multiplicand[ 16 ]
initial
begin
	multiplicand[16] = 1'b0;
end 
// multiplicand[ 15 ]
initial
begin
	multiplicand[15] = 1'b0;
end 
// multiplicand[ 14 ]
initial
begin
	multiplicand[14] = 1'b0;
end 
// multiplicand[ 13 ]
initial
begin
	multiplicand[13] = 1'b0;
end 
// multiplicand[ 12 ]
initial
begin
	multiplicand[12] = 1'b0;
end 
// multiplicand[ 11 ]
initial
begin
	multiplicand[11] = 1'b0;
end 
// multiplicand[ 10 ]
initial
begin
	multiplicand[10] = 1'b0;
end 
// multiplicand[ 9 ]
initial
begin
	multiplicand[9] = 1'b0;
end 
// multiplicand[ 8 ]
initial
begin
	multiplicand[8] = 1'b0;
end 
// multiplicand[ 7 ]
initial
begin
	multiplicand[7] = 1'b0;
end 
// multiplicand[ 6 ]
initial
begin
	multiplicand[6] = 1'b0;
end 
// multiplicand[ 5 ]
initial
begin
	multiplicand[5] = 1'b0;
end 
// multiplicand[ 4 ]
initial
begin
	multiplicand[4] = 1'b0;
end 
// multiplicand[ 3 ]
initial
begin
	multiplicand[3] = 1'b0;
end 
// multiplicand[ 2 ]
initial
begin
	multiplicand[2] = 1'b0;
end 
// multiplicand[ 1 ]
initial
begin
	multiplicand[1] = 1'b1;
end 
// multiplicand[ 0 ]
initial
begin
	multiplicand[0] = 1'b1;
end 
// multiplier[ 31 ]
initial
begin
	multiplier[31] = 1'b0;
end 
// multiplier[ 30 ]
initial
begin
	multiplier[30] = 1'b0;
end 
// multiplier[ 29 ]
initial
begin
	multiplier[29] = 1'b0;
end 
// multiplier[ 28 ]
initial
begin
	multiplier[28] = 1'b0;
end 
// multiplier[ 27 ]
initial
begin
	multiplier[27] = 1'b0;
end 
// multiplier[ 26 ]
initial
begin
	multiplier[26] = 1'b0;
end 
// multiplier[ 25 ]
initial
begin
	multiplier[25] = 1'b0;
end 
// multiplier[ 24 ]
initial
begin
	multiplier[24] = 1'b0;
end 
// multiplier[ 23 ]
initial
begin
	multiplier[23] = 1'b0;
end 
// multiplier[ 22 ]
initial
begin
	multiplier[22] = 1'b0;
end 
// multiplier[ 21 ]
initial
begin
	multiplier[21] = 1'b0;
end 
// multiplier[ 20 ]
initial
begin
	multiplier[20] = 1'b0;
end 
// multiplier[ 19 ]
initial
begin
	multiplier[19] = 1'b0;
end 
// multiplier[ 18 ]
initial
begin
	multiplier[18] = 1'b0;
end 
// multiplier[ 17 ]
initial
begin
	multiplier[17] = 1'b0;
end 
// multiplier[ 16 ]
initial
begin
	multiplier[16] = 1'b0;
end 
// multiplier[ 15 ]
initial
begin
	multiplier[15] = 1'b0;
end 
// multiplier[ 14 ]
initial
begin
	multiplier[14] = 1'b0;
end 
// multiplier[ 13 ]
initial
begin
	multiplier[13] = 1'b0;
end 
// multiplier[ 12 ]
initial
begin
	multiplier[12] = 1'b0;
end 
// multiplier[ 11 ]
initial
begin
	multiplier[11] = 1'b0;
end 
// multiplier[ 10 ]
initial
begin
	multiplier[10] = 1'b0;
end 
// multiplier[ 9 ]
initial
begin
	multiplier[9] = 1'b0;
end 
// multiplier[ 8 ]
initial
begin
	multiplier[8] = 1'b0;
end 
// multiplier[ 7 ]
initial
begin
	multiplier[7] = 1'b0;
end 
// multiplier[ 6 ]
initial
begin
	multiplier[6] = 1'b0;
end 
// multiplier[ 5 ]
initial
begin
	multiplier[5] = 1'b0;
end 
// multiplier[ 4 ]
initial
begin
	multiplier[4] = 1'b0;
end 
// multiplier[ 3 ]
initial
begin
	multiplier[3] = 1'b0;
end 
// multiplier[ 2 ]
initial
begin
	multiplier[2] = 1'b1;
end 
// multiplier[ 1 ]
initial
begin
	multiplier[1] = 1'b0;
end 
// multiplier[ 0 ]
initial
begin
	multiplier[0] = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

